{

  "spec/serializers/*_spec.rb": {
    "template": [
      "require 'spec_helper'",
      "",
      "RSpec.describe %S, type: :model do",
      "end"
    ]
  },

  "app/decorators/*_decorator.rb": {
    "command": "decorator",
    "template": "class %SDecorator < Draper::Decorator\nend",
    "affinity": "model"
  },

  "config/*": {
    "command": "cfg"
  },

  "spec/factories/*.rb": {
    "command": "factory",
    "affinity": "collection",
    "alternate": "app/models/%i.rb",
    "related": "db/schema.rb#%s",
    "test": "spec/models/%i_spec.rb",
    "template": "FactoryGirl.define do\n  factory :%i do\n  end\nend",
    "keywords": "factory sequence"
  },

  "features/*.feature": {
    "command": "feature",
    "template": "Feature: %h"
  },

  "app/policies/*.rb": {
    "command": "policy",
    "template": "class %SPolicy\nend",
    "affinity": "model"
  },

  "app/presenters/*.rb": {
    "command": "presenter",
    "template": "class %S\nend",
    "affinity": "model"
  },

  "app/serializers/*_serializer.rb": {
    "command": "serializer",
    "template": "require 'oat/adapters/hal'\n\nclass %SSerializer < Oat::Serializer\n  adapter Oat::Adapters::HAL\n\nend",
    "affinity": "model"
  },

  "app/representers/*.rb": {
    "command": "representer",
    "template": "class %S\nend",
    "affinity": "model"
  },

  "features/step_definitions/*_steps.rb": {
    "command": "steps"
  },

  "app/uploaders/*_uploader.rb": {
    "command": "uploader",
    "template": "class %SUploader < CarrierWave::Uploader::Base\nend"
  },

  "app/workers/*_worker.rb": {
    "command": "worker",
    "template": "class %SWorker\n  include Sidekiq::Worker\n\n  def perform\n  end\n\nend",
    "affinity": "model"
  }
}

